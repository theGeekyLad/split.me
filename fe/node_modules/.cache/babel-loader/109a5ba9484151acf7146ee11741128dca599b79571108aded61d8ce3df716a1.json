{"ast":null,"code":"import * as React from 'react';\nimport { getMeridiem, convertToMeridiem } from \"../utils/time-utils.js\";\nimport { usePickerAdapter } from \"../../hooks/usePickerAdapter.js\";\nexport function useNextMonthDisabled(month, {\n  disableFuture,\n  maxDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const lastEnabledMonth = adapter.startOfMonth(disableFuture && adapter.isBefore(now, maxDate) ? now : maxDate);\n    return !adapter.isAfter(lastEnabledMonth, month);\n  }, [disableFuture, maxDate, month, adapter, timezone]);\n}\nexport function usePreviousMonthDisabled(month, {\n  disablePast,\n  minDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const firstEnabledMonth = adapter.startOfMonth(disablePast && adapter.isAfter(now, minDate) ? now : minDate);\n    return !adapter.isBefore(firstEnabledMonth, month);\n  }, [disablePast, minDate, month, adapter, timezone]);\n}\nexport function useMeridiemMode(date, ampm, onChange, selectionState) {\n  const adapter = usePickerAdapter();\n  const cleanDate = React.useMemo(() => !adapter.isValid(date) ? null : date, [adapter, date]);\n  const meridiemMode = getMeridiem(cleanDate, adapter);\n  const handleMeridiemChange = React.useCallback(mode => {\n    const timeWithMeridiem = cleanDate == null ? null : convertToMeridiem(cleanDate, mode, Boolean(ampm), adapter);\n    onChange(timeWithMeridiem, selectionState ?? 'partial');\n  }, [ampm, cleanDate, onChange, selectionState, adapter]);\n  return {\n    meridiemMode,\n    handleMeridiemChange\n  };\n}","map":{"version":3,"names":["React","getMeridiem","convertToMeridiem","usePickerAdapter","useNextMonthDisabled","month","disableFuture","maxDate","timezone","adapter","useMemo","now","date","undefined","lastEnabledMonth","startOfMonth","isBefore","isAfter","usePreviousMonthDisabled","disablePast","minDate","firstEnabledMonth","useMeridiemMode","ampm","onChange","selectionState","cleanDate","isValid","meridiemMode","handleMeridiemChange","useCallback","mode","timeWithMeridiem","Boolean"],"sources":["/home/thegeekylad/Projects/Projects/split.me/node_modules/@mui/x-date-pickers/esm/internals/hooks/date-helpers-hooks.js"],"sourcesContent":["import * as React from 'react';\nimport { getMeridiem, convertToMeridiem } from \"../utils/time-utils.js\";\nimport { usePickerAdapter } from \"../../hooks/usePickerAdapter.js\";\nexport function useNextMonthDisabled(month, {\n  disableFuture,\n  maxDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const lastEnabledMonth = adapter.startOfMonth(disableFuture && adapter.isBefore(now, maxDate) ? now : maxDate);\n    return !adapter.isAfter(lastEnabledMonth, month);\n  }, [disableFuture, maxDate, month, adapter, timezone]);\n}\nexport function usePreviousMonthDisabled(month, {\n  disablePast,\n  minDate,\n  timezone\n}) {\n  const adapter = usePickerAdapter();\n  return React.useMemo(() => {\n    const now = adapter.date(undefined, timezone);\n    const firstEnabledMonth = adapter.startOfMonth(disablePast && adapter.isAfter(now, minDate) ? now : minDate);\n    return !adapter.isBefore(firstEnabledMonth, month);\n  }, [disablePast, minDate, month, adapter, timezone]);\n}\nexport function useMeridiemMode(date, ampm, onChange, selectionState) {\n  const adapter = usePickerAdapter();\n  const cleanDate = React.useMemo(() => !adapter.isValid(date) ? null : date, [adapter, date]);\n  const meridiemMode = getMeridiem(cleanDate, adapter);\n  const handleMeridiemChange = React.useCallback(mode => {\n    const timeWithMeridiem = cleanDate == null ? null : convertToMeridiem(cleanDate, mode, Boolean(ampm), adapter);\n    onChange(timeWithMeridiem, selectionState ?? 'partial');\n  }, [ampm, cleanDate, onChange, selectionState, adapter]);\n  return {\n    meridiemMode,\n    handleMeridiemChange\n  };\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,EAAEC,iBAAiB,QAAQ,wBAAwB;AACvE,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,OAAO,SAASC,oBAAoBA,CAACC,KAAK,EAAE;EAC1CC,aAAa;EACbC,OAAO;EACPC;AACF,CAAC,EAAE;EACD,MAAMC,OAAO,GAAGN,gBAAgB,CAAC,CAAC;EAClC,OAAOH,KAAK,CAACU,OAAO,CAAC,MAAM;IACzB,MAAMC,GAAG,GAAGF,OAAO,CAACG,IAAI,CAACC,SAAS,EAAEL,QAAQ,CAAC;IAC7C,MAAMM,gBAAgB,GAAGL,OAAO,CAACM,YAAY,CAACT,aAAa,IAAIG,OAAO,CAACO,QAAQ,CAACL,GAAG,EAAEJ,OAAO,CAAC,GAAGI,GAAG,GAAGJ,OAAO,CAAC;IAC9G,OAAO,CAACE,OAAO,CAACQ,OAAO,CAACH,gBAAgB,EAAET,KAAK,CAAC;EAClD,CAAC,EAAE,CAACC,aAAa,EAAEC,OAAO,EAAEF,KAAK,EAAEI,OAAO,EAAED,QAAQ,CAAC,CAAC;AACxD;AACA,OAAO,SAASU,wBAAwBA,CAACb,KAAK,EAAE;EAC9Cc,WAAW;EACXC,OAAO;EACPZ;AACF,CAAC,EAAE;EACD,MAAMC,OAAO,GAAGN,gBAAgB,CAAC,CAAC;EAClC,OAAOH,KAAK,CAACU,OAAO,CAAC,MAAM;IACzB,MAAMC,GAAG,GAAGF,OAAO,CAACG,IAAI,CAACC,SAAS,EAAEL,QAAQ,CAAC;IAC7C,MAAMa,iBAAiB,GAAGZ,OAAO,CAACM,YAAY,CAACI,WAAW,IAAIV,OAAO,CAACQ,OAAO,CAACN,GAAG,EAAES,OAAO,CAAC,GAAGT,GAAG,GAAGS,OAAO,CAAC;IAC5G,OAAO,CAACX,OAAO,CAACO,QAAQ,CAACK,iBAAiB,EAAEhB,KAAK,CAAC;EACpD,CAAC,EAAE,CAACc,WAAW,EAAEC,OAAO,EAAEf,KAAK,EAAEI,OAAO,EAAED,QAAQ,CAAC,CAAC;AACtD;AACA,OAAO,SAASc,eAAeA,CAACV,IAAI,EAAEW,IAAI,EAAEC,QAAQ,EAAEC,cAAc,EAAE;EACpE,MAAMhB,OAAO,GAAGN,gBAAgB,CAAC,CAAC;EAClC,MAAMuB,SAAS,GAAG1B,KAAK,CAACU,OAAO,CAAC,MAAM,CAACD,OAAO,CAACkB,OAAO,CAACf,IAAI,CAAC,GAAG,IAAI,GAAGA,IAAI,EAAE,CAACH,OAAO,EAAEG,IAAI,CAAC,CAAC;EAC5F,MAAMgB,YAAY,GAAG3B,WAAW,CAACyB,SAAS,EAAEjB,OAAO,CAAC;EACpD,MAAMoB,oBAAoB,GAAG7B,KAAK,CAAC8B,WAAW,CAACC,IAAI,IAAI;IACrD,MAAMC,gBAAgB,GAAGN,SAAS,IAAI,IAAI,GAAG,IAAI,GAAGxB,iBAAiB,CAACwB,SAAS,EAAEK,IAAI,EAAEE,OAAO,CAACV,IAAI,CAAC,EAAEd,OAAO,CAAC;IAC9Ge,QAAQ,CAACQ,gBAAgB,EAAEP,cAAc,IAAI,SAAS,CAAC;EACzD,CAAC,EAAE,CAACF,IAAI,EAAEG,SAAS,EAAEF,QAAQ,EAAEC,cAAc,EAAEhB,OAAO,CAAC,CAAC;EACxD,OAAO;IACLmB,YAAY;IACZC;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}