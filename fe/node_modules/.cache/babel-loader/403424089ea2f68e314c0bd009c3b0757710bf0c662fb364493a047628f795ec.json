{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from \"../internals/utils/time-utils.js\";\nimport { singleItemValueManager } from \"../internals/utils/valueManagers.js\";\n\n/**\n * Validation props used by the Time Picker, Time Field and Clock components.\n */\n\n/**\n * Validation props as received by the validateTime method.\n */\n\n/**\n * Name of the props that should be defaulted before being passed to the validateTime method.\n */\n\nexport const validateTime = ({\n  adapter,\n  value,\n  timezone,\n  props\n}) => {\n  if (value === null) {\n    return null;\n  }\n  const {\n    minTime,\n    maxTime,\n    minutesStep,\n    shouldDisableTime,\n    disableIgnoringDatePartForTimeValidation = false,\n    disablePast,\n    disableFuture\n  } = props;\n  const now = adapter.date(undefined, timezone);\n  const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter);\n  switch (true) {\n    case !adapter.isValid(value):\n      return 'invalidDate';\n    case Boolean(minTime && isAfter(minTime, value)):\n      return 'minTime';\n    case Boolean(maxTime && isAfter(value, maxTime)):\n      return 'maxTime';\n    case Boolean(disableFuture && adapter.isAfter(value, now)):\n      return 'disableFuture';\n    case Boolean(disablePast && adapter.isBefore(value, now)):\n      return 'disablePast';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'hours')):\n      return 'shouldDisableTime-hours';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'minutes')):\n      return 'shouldDisableTime-minutes';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'seconds')):\n      return 'shouldDisableTime-seconds';\n    case Boolean(minutesStep && adapter.getMinutes(value) % minutesStep !== 0):\n      return 'minutesStep';\n    default:\n      return null;\n  }\n};\nvalidateTime.valueManager = singleItemValueManager;","map":{"version":3,"names":["createIsAfterIgnoreDatePart","singleItemValueManager","validateTime","adapter","value","timezone","props","minTime","maxTime","minutesStep","shouldDisableTime","disableIgnoringDatePartForTimeValidation","disablePast","disableFuture","now","date","undefined","isAfter","isValid","Boolean","isBefore","getMinutes","valueManager"],"sources":["/home/thegeekylad/Projects/Projects/split.me/node_modules/@mui/x-date-pickers/esm/validation/validateTime.js"],"sourcesContent":["import { createIsAfterIgnoreDatePart } from \"../internals/utils/time-utils.js\";\nimport { singleItemValueManager } from \"../internals/utils/valueManagers.js\";\n\n/**\n * Validation props used by the Time Picker, Time Field and Clock components.\n */\n\n/**\n * Validation props as received by the validateTime method.\n */\n\n/**\n * Name of the props that should be defaulted before being passed to the validateTime method.\n */\n\nexport const validateTime = ({\n  adapter,\n  value,\n  timezone,\n  props\n}) => {\n  if (value === null) {\n    return null;\n  }\n  const {\n    minTime,\n    maxTime,\n    minutesStep,\n    shouldDisableTime,\n    disableIgnoringDatePartForTimeValidation = false,\n    disablePast,\n    disableFuture\n  } = props;\n  const now = adapter.date(undefined, timezone);\n  const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter);\n  switch (true) {\n    case !adapter.isValid(value):\n      return 'invalidDate';\n    case Boolean(minTime && isAfter(minTime, value)):\n      return 'minTime';\n    case Boolean(maxTime && isAfter(value, maxTime)):\n      return 'maxTime';\n    case Boolean(disableFuture && adapter.isAfter(value, now)):\n      return 'disableFuture';\n    case Boolean(disablePast && adapter.isBefore(value, now)):\n      return 'disablePast';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'hours')):\n      return 'shouldDisableTime-hours';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'minutes')):\n      return 'shouldDisableTime-minutes';\n    case Boolean(shouldDisableTime && shouldDisableTime(value, 'seconds')):\n      return 'shouldDisableTime-seconds';\n    case Boolean(minutesStep && adapter.getMinutes(value) % minutesStep !== 0):\n      return 'minutesStep';\n    default:\n      return null;\n  }\n};\nvalidateTime.valueManager = singleItemValueManager;"],"mappings":"AAAA,SAASA,2BAA2B,QAAQ,kCAAkC;AAC9E,SAASC,sBAAsB,QAAQ,qCAAqC;;AAE5E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAC3BC,OAAO;EACPC,KAAK;EACLC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJ,IAAIF,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;EACb;EACA,MAAM;IACJG,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,iBAAiB;IACjBC,wCAAwC,GAAG,KAAK;IAChDC,WAAW;IACXC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,GAAG,GAAGX,OAAO,CAACY,IAAI,CAACC,SAAS,EAAEX,QAAQ,CAAC;EAC7C,MAAMY,OAAO,GAAGjB,2BAA2B,CAACW,wCAAwC,EAAER,OAAO,CAAC;EAC9F,QAAQ,IAAI;IACV,KAAK,CAACA,OAAO,CAACe,OAAO,CAACd,KAAK,CAAC;MAC1B,OAAO,aAAa;IACtB,KAAKe,OAAO,CAACZ,OAAO,IAAIU,OAAO,CAACV,OAAO,EAAEH,KAAK,CAAC,CAAC;MAC9C,OAAO,SAAS;IAClB,KAAKe,OAAO,CAACX,OAAO,IAAIS,OAAO,CAACb,KAAK,EAAEI,OAAO,CAAC,CAAC;MAC9C,OAAO,SAAS;IAClB,KAAKW,OAAO,CAACN,aAAa,IAAIV,OAAO,CAACc,OAAO,CAACb,KAAK,EAAEU,GAAG,CAAC,CAAC;MACxD,OAAO,eAAe;IACxB,KAAKK,OAAO,CAACP,WAAW,IAAIT,OAAO,CAACiB,QAAQ,CAAChB,KAAK,EAAEU,GAAG,CAAC,CAAC;MACvD,OAAO,aAAa;IACtB,KAAKK,OAAO,CAACT,iBAAiB,IAAIA,iBAAiB,CAACN,KAAK,EAAE,OAAO,CAAC,CAAC;MAClE,OAAO,yBAAyB;IAClC,KAAKe,OAAO,CAACT,iBAAiB,IAAIA,iBAAiB,CAACN,KAAK,EAAE,SAAS,CAAC,CAAC;MACpE,OAAO,2BAA2B;IACpC,KAAKe,OAAO,CAACT,iBAAiB,IAAIA,iBAAiB,CAACN,KAAK,EAAE,SAAS,CAAC,CAAC;MACpE,OAAO,2BAA2B;IACpC,KAAKe,OAAO,CAACV,WAAW,IAAIN,OAAO,CAACkB,UAAU,CAACjB,KAAK,CAAC,GAAGK,WAAW,KAAK,CAAC,CAAC;MACxE,OAAO,aAAa;IACtB;MACE,OAAO,IAAI;EACf;AACF,CAAC;AACDP,YAAY,CAACoB,YAAY,GAAGrB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}