{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFieldCharacterEditing = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useField = require(\"./useField.utils\");\nvar _usePickerAdapter = require(\"../../../hooks/usePickerAdapter\");\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nconst useFieldCharacterEditing = ({\n  stateResponse: {\n    // States and derived states\n    localizedDigits,\n    sectionsValueBoundaries,\n    state,\n    timezone,\n    // Methods to update the states\n    setCharacterQuery,\n    setTempAndroidValueStr,\n    updateSectionValue\n  }\n}) => {\n  const adapter = (0, _usePickerAdapter.usePickerAdapter)();\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${state.characterQuery.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => (0, _useField.getLetterEditingOptions)(adapter, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && (0, _useField.getDateSectionConfigFromFormatToken)(adapter, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => (0, _useField.changeSectionValueFormat)(adapter, fallbackValue, adapter.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = ({\n      queryValue,\n      skipIfBelowMinimum,\n      section\n    }) => {\n      const cleanQueryValue = (0, _useField.removeLocalizedDigits)(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = (0, _useField.cleanDigitSectionValue)(adapter, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = (0, _useField.doesSectionFormatHaveLeadingZeros)(adapter, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = (0, _useField.changeSectionValueFormat)(adapter, response.sectionValue, 'MM', activeSection.format);\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = (0, _useField.getDaysInWeekStr)(adapter, activeSection.format)[Number(response.sectionValue) - 1];\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => (0, _useField.isStringNumber)(queryValue, localizedDigits));\n  };\n  return (0, _useEventCallback.default)(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = (0, _useField.isStringNumber)(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing((0, _extends2.default)({}, params, {\n      keyPressed: (0, _useField.applyLocalizedDigits)(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\nexports.useFieldCharacterEditing = useFieldCharacterEditing;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","useFieldCharacterEditing","_extends2","_useEventCallback","_useField","_usePickerAdapter","isQueryResponseWithoutValue","response","saveQuery","stateResponse","localizedDigits","sectionsValueBoundaries","state","timezone","setCharacterQuery","setTempAndroidValueStr","updateSectionValue","adapter","usePickerAdapter","applyQuery","keyPressed","sectionIndex","getFirstSectionValueMatchingWithQuery","isValidQueryValue","cleanKeyPressed","toLowerCase","activeSection","sections","characterQuery","concatenatedQueryValue","queryResponse","sectionType","type","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","getLetterEditingOptions","contentType","getDateSectionConfigFromFormatToken","fallbackOptions","fallbackValue","changeSectionValueFormat","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","skipIfBelowMinimum","section","cleanQueryValue","removeLocalizedDigits","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","cleanDigitSectionValue","hasLeadingZerosInFormat","doesSectionFormatHaveLeadingZeros","hasLeadingZerosInInput","maxLength","formattedValue","getDaysInWeekStr","isStringNumber","isNumericEditing","applyLocalizedDigits"],"sources":["/home/thegeekylad/Projects/Projects/split.me/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFieldCharacterEditing = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useField = require(\"./useField.utils\");\nvar _usePickerAdapter = require(\"../../../hooks/usePickerAdapter\");\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nconst useFieldCharacterEditing = ({\n  stateResponse: {\n    // States and derived states\n    localizedDigits,\n    sectionsValueBoundaries,\n    state,\n    timezone,\n    // Methods to update the states\n    setCharacterQuery,\n    setTempAndroidValueStr,\n    updateSectionValue\n  }\n}) => {\n  const adapter = (0, _usePickerAdapter.usePickerAdapter)();\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = state.sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (state.characterQuery != null && (!isValidQueryValue || isValidQueryValue(state.characterQuery.value)) && state.characterQuery.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${state.characterQuery.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setCharacterQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      setCharacterQuery(null);\n      return null;\n    }\n    setCharacterQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => (0, _useField.getLetterEditingOptions)(adapter, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && (0, _useField.getDateSectionConfigFromFormatToken)(adapter, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => (0, _useField.changeSectionValueFormat)(adapter, fallbackValue, adapter.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, adapter.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = ({\n      queryValue,\n      skipIfBelowMinimum,\n      section\n    }) => {\n      const cleanQueryValue = (0, _useField.removeLocalizedDigits)(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (skipIfBelowMinimum && queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = (0, _useField.cleanDigitSectionValue)(adapter, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: false,\n          section: activeSection\n        });\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = (0, _useField.doesSectionFormatHaveLeadingZeros)(adapter, 'digit', 'month', 'MM');\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: {\n            type: activeSection.type,\n            format: 'MM',\n            hasLeadingZerosInFormat,\n            hasLeadingZerosInInput: true,\n            contentType: 'digit',\n            maxLength: 2\n          }\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = (0, _useField.changeSectionValueFormat)(adapter, response.sectionValue, 'MM', activeSection.format);\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue({\n          queryValue,\n          skipIfBelowMinimum: true,\n          section: activeSection\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = (0, _useField.getDaysInWeekStr)(adapter, activeSection.format)[Number(response.sectionValue) - 1];\n        return (0, _extends2.default)({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => (0, _useField.isStringNumber)(queryValue, localizedDigits));\n  };\n  return (0, _useEventCallback.default)(params => {\n    const section = state.sections[params.sectionIndex];\n    const isNumericEditing = (0, _useField.isStringNumber)(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing((0, _extends2.default)({}, params, {\n      keyPressed: (0, _useField.applyLocalizedDigits)(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      section,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n};\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\nexports.useFieldCharacterEditing = useFieldCharacterEditing;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAC5FC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,wBAAwB,GAAG,KAAK,CAAC;AACzC,IAAIC,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,gCAAgC,CAAC,CAAC;AACjF,IAAIQ,iBAAiB,GAAGT,sBAAsB,CAACC,OAAO,CAAC,6BAA6B,CAAC,CAAC;AACtF,IAAIS,SAAS,GAAGT,OAAO,CAAC,kBAAkB,CAAC;AAC3C,IAAIU,iBAAiB,GAAGV,OAAO,CAAC,iCAAiC,CAAC;AAClE,MAAMW,2BAA2B,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,SAAS,IAAI,IAAI;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMP,wBAAwB,GAAGA,CAAC;EAChCQ,aAAa,EAAE;IACb;IACAC,eAAe;IACfC,uBAAuB;IACvBC,KAAK;IACLC,QAAQ;IACR;IACAC,iBAAiB;IACjBC,sBAAsB;IACtBC;EACF;AACF,CAAC,KAAK;EACJ,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEZ,iBAAiB,CAACa,gBAAgB,EAAE,CAAC;EACzD,MAAMC,UAAU,GAAGA,CAAC;IAClBC,UAAU;IACVC;EACF,CAAC,EAAEC,qCAAqC,EAAEC,iBAAiB,KAAK;IAC9D,MAAMC,eAAe,GAAGJ,UAAU,CAACK,WAAW,CAAC,CAAC;IAChD,MAAMC,aAAa,GAAGd,KAAK,CAACe,QAAQ,CAACN,YAAY,CAAC;;IAElD;IACA;IACA,IAAIT,KAAK,CAACgB,cAAc,IAAI,IAAI,KAAK,CAACL,iBAAiB,IAAIA,iBAAiB,CAACX,KAAK,CAACgB,cAAc,CAAC5B,KAAK,CAAC,CAAC,IAAIY,KAAK,CAACgB,cAAc,CAACP,YAAY,KAAKA,YAAY,EAAE;MAC/J,MAAMQ,sBAAsB,GAAG,GAAGjB,KAAK,CAACgB,cAAc,CAAC5B,KAAK,GAAGwB,eAAe,EAAE;MAChF,MAAMM,aAAa,GAAGR,qCAAqC,CAACO,sBAAsB,EAAEH,aAAa,CAAC;MAClG,IAAI,CAACpB,2BAA2B,CAACwB,aAAa,CAAC,EAAE;QAC/ChB,iBAAiB,CAAC;UAChBO,YAAY;UACZrB,KAAK,EAAE6B,sBAAsB;UAC7BE,WAAW,EAAEL,aAAa,CAACM;QAC7B,CAAC,CAAC;QACF,OAAOF,aAAa;MACtB;IACF;IACA,MAAMA,aAAa,GAAGR,qCAAqC,CAACE,eAAe,EAAEE,aAAa,CAAC;IAC3F,IAAIpB,2BAA2B,CAACwB,aAAa,CAAC,IAAI,CAACA,aAAa,CAACtB,SAAS,EAAE;MAC1EM,iBAAiB,CAAC,IAAI,CAAC;MACvB,OAAO,IAAI;IACb;IACAA,iBAAiB,CAAC;MAChBO,YAAY;MACZrB,KAAK,EAAEwB,eAAe;MACtBO,WAAW,EAAEL,aAAa,CAACM;IAC7B,CAAC,CAAC;IACF,IAAI1B,2BAA2B,CAACwB,aAAa,CAAC,EAAE;MAC9C,OAAO,IAAI;IACb;IACA,OAAOA,aAAa;EACtB,CAAC;EACD,MAAMG,kBAAkB,GAAGC,MAAM,IAAI;IACnC,MAAMC,mBAAmB,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,UAAU,KAAK;MAC3D,MAAMC,cAAc,GAAGF,OAAO,CAACG,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAChB,WAAW,CAAC,CAAC,CAACiB,UAAU,CAACJ,UAAU,CAAC,CAAC;MAC5F,IAAIC,cAAc,CAACI,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO;UACLnC,SAAS,EAAE;QACb,CAAC;MACH;MACA,OAAO;QACLoC,YAAY,EAAEL,cAAc,CAAC,CAAC,CAAC;QAC/BM,qBAAqB,EAAEN,cAAc,CAACI,MAAM,KAAK;MACnD,CAAC;IACH,CAAC;IACD,MAAMG,kCAAkC,GAAGA,CAACR,UAAU,EAAEZ,aAAa,EAAEqB,cAAc,EAAEC,mBAAmB,KAAK;MAC7G,MAAMC,UAAU,GAAGb,MAAM,IAAI,CAAC,CAAC,EAAEhC,SAAS,CAAC8C,uBAAuB,EAAEjC,OAAO,EAAEJ,QAAQ,EAAEa,aAAa,CAACM,IAAI,EAAEI,MAAM,CAAC;MAClH,IAAIV,aAAa,CAACyB,WAAW,KAAK,QAAQ,EAAE;QAC1C,OAAOhB,mBAAmB,CAACT,aAAa,CAACU,MAAM,EAAEa,UAAU,CAACvB,aAAa,CAACU,MAAM,CAAC,EAAEE,UAAU,CAAC;MAChG;;MAEA;MACA;MACA;MACA,IAAIS,cAAc,IAAIC,mBAAmB,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE5C,SAAS,CAACgD,mCAAmC,EAAEnC,OAAO,EAAE8B,cAAc,CAAC,CAACI,WAAW,KAAK,QAAQ,EAAE;QACzJ,MAAME,eAAe,GAAGJ,UAAU,CAACF,cAAc,CAAC;QAClD,MAAMxC,QAAQ,GAAG4B,mBAAmB,CAACY,cAAc,EAAEM,eAAe,EAAEf,UAAU,CAAC;QACjF,IAAIhC,2BAA2B,CAACC,QAAQ,CAAC,EAAE;UACzC,OAAO;YACLC,SAAS,EAAE;UACb,CAAC;QACH;QACA,OAAO,CAAC,CAAC,EAAEN,SAAS,CAACN,OAAO,EAAE,CAAC,CAAC,EAAEW,QAAQ,EAAE;UAC1CqC,YAAY,EAAEI,mBAAmB,CAACzC,QAAQ,CAACqC,YAAY,EAAES,eAAe;QAC1E,CAAC,CAAC;MACJ;MACA,OAAO;QACL7C,SAAS,EAAE;MACb,CAAC;IACH,CAAC;IACD,MAAMc,qCAAqC,GAAGA,CAACgB,UAAU,EAAEZ,aAAa,KAAK;MAC3E,QAAQA,aAAa,CAACM,IAAI;QACxB,KAAK,OAAO;UACV;YACE,MAAMgB,mBAAmB,GAAGM,aAAa,IAAI,CAAC,CAAC,EAAElD,SAAS,CAACmD,wBAAwB,EAAEtC,OAAO,EAAEqC,aAAa,EAAErC,OAAO,CAACuC,OAAO,CAACC,KAAK,EAAE/B,aAAa,CAACU,MAAM,CAAC;YACzJ,OAAOU,kCAAkC,CAACR,UAAU,EAAEZ,aAAa,EAAET,OAAO,CAACuC,OAAO,CAACC,KAAK,EAAET,mBAAmB,CAAC;UAClH;QACF,KAAK,SAAS;UACZ;YACE,MAAMA,mBAAmB,GAAGA,CAACM,aAAa,EAAED,eAAe,KAAKA,eAAe,CAACK,OAAO,CAACJ,aAAa,CAAC,CAACK,QAAQ,CAAC,CAAC;YACjH,OAAOb,kCAAkC,CAACR,UAAU,EAAEZ,aAAa,EAAET,OAAO,CAACuC,OAAO,CAACI,OAAO,EAAEZ,mBAAmB,CAAC;UACpH;QACF,KAAK,UAAU;UACb;YACE,OAAOF,kCAAkC,CAACR,UAAU,EAAEZ,aAAa,CAAC;UACtE;QACF;UACE;YACE,OAAO;cACLlB,SAAS,EAAE;YACb,CAAC;UACH;MACJ;IACF,CAAC;IACD,OAAOW,UAAU,CAACe,MAAM,EAAEZ,qCAAqC,CAAC;EAClE,CAAC;EACD,MAAMuC,mBAAmB,GAAG3B,MAAM,IAAI;IACpC,MAAM4B,kBAAkB,GAAGA,CAAC;MAC1BxB,UAAU;MACVyB,kBAAkB;MAClBC;IACF,CAAC,KAAK;MACJ,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAE7D,SAAS,CAAC8D,qBAAqB,EAAE5B,UAAU,EAAE5B,eAAe,CAAC;MACzF,MAAMyD,gBAAgB,GAAGC,MAAM,CAACH,eAAe,CAAC;MAChD,MAAMI,iBAAiB,GAAG1D,uBAAuB,CAACqD,OAAO,CAAChC,IAAI,CAAC,CAAC;QAC9DsC,WAAW,EAAE,IAAI;QACjBlC,MAAM,EAAE4B,OAAO,CAAC5B,MAAM;QACtBe,WAAW,EAAEa,OAAO,CAACb;MACvB,CAAC,CAAC;MACF,IAAIgB,gBAAgB,GAAGE,iBAAiB,CAACE,OAAO,EAAE;QAChD,OAAO;UACL/D,SAAS,EAAE;QACb,CAAC;MACH;;MAEA;MACA;MACA;MACA,IAAIuD,kBAAkB,IAAII,gBAAgB,GAAGE,iBAAiB,CAACG,OAAO,EAAE;QACtE,OAAO;UACLhE,SAAS,EAAE;QACb,CAAC;MACH;MACA,MAAMqC,qBAAqB,GAAGsB,gBAAgB,GAAG,EAAE,GAAGE,iBAAiB,CAACE,OAAO,IAAIN,eAAe,CAACtB,MAAM,KAAK0B,iBAAiB,CAACE,OAAO,CAACZ,QAAQ,CAAC,CAAC,CAAChB,MAAM;MACzJ,MAAM8B,eAAe,GAAG,CAAC,CAAC,EAAErE,SAAS,CAACsE,sBAAsB,EAAEzD,OAAO,EAAEkD,gBAAgB,EAAEE,iBAAiB,EAAE3D,eAAe,EAAEsD,OAAO,CAAC;MACrI,OAAO;QACLpB,YAAY,EAAE6B,eAAe;QAC7B5B;MACF,CAAC;IACH,CAAC;IACD,MAAMvB,qCAAqC,GAAGA,CAACgB,UAAU,EAAEZ,aAAa,KAAK;MAC3E,IAAIA,aAAa,CAACyB,WAAW,KAAK,OAAO,IAAIzB,aAAa,CAACyB,WAAW,KAAK,mBAAmB,EAAE;QAC9F,OAAOW,kBAAkB,CAAC;UACxBxB,UAAU;UACVyB,kBAAkB,EAAE,KAAK;UACzBC,OAAO,EAAEtC;QACX,CAAC,CAAC;MACJ;;MAEA;MACA;MACA,IAAIA,aAAa,CAACM,IAAI,KAAK,OAAO,EAAE;QAClC,MAAM2C,uBAAuB,GAAG,CAAC,CAAC,EAAEvE,SAAS,CAACwE,iCAAiC,EAAE3D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC;QACjH,MAAMV,QAAQ,GAAGuD,kBAAkB,CAAC;UAClCxB,UAAU;UACVyB,kBAAkB,EAAE,IAAI;UACxBC,OAAO,EAAE;YACPhC,IAAI,EAAEN,aAAa,CAACM,IAAI;YACxBI,MAAM,EAAE,IAAI;YACZuC,uBAAuB;YACvBE,sBAAsB,EAAE,IAAI;YAC5B1B,WAAW,EAAE,OAAO;YACpB2B,SAAS,EAAE;UACb;QACF,CAAC,CAAC;QACF,IAAIxE,2BAA2B,CAACC,QAAQ,CAAC,EAAE;UACzC,OAAOA,QAAQ;QACjB;QACA,MAAMwE,cAAc,GAAG,CAAC,CAAC,EAAE3E,SAAS,CAACmD,wBAAwB,EAAEtC,OAAO,EAAEV,QAAQ,CAACqC,YAAY,EAAE,IAAI,EAAElB,aAAa,CAACU,MAAM,CAAC;QAC1H,OAAO,CAAC,CAAC,EAAElC,SAAS,CAACN,OAAO,EAAE,CAAC,CAAC,EAAEW,QAAQ,EAAE;UAC1CqC,YAAY,EAAEmC;QAChB,CAAC,CAAC;MACJ;;MAEA;MACA;MACA,IAAIrD,aAAa,CAACM,IAAI,KAAK,SAAS,EAAE;QACpC,MAAMzB,QAAQ,GAAGuD,kBAAkB,CAAC;UAClCxB,UAAU;UACVyB,kBAAkB,EAAE,IAAI;UACxBC,OAAO,EAAEtC;QACX,CAAC,CAAC;QACF,IAAIpB,2BAA2B,CAACC,QAAQ,CAAC,EAAE;UACzC,OAAOA,QAAQ;QACjB;QACA,MAAMwE,cAAc,GAAG,CAAC,CAAC,EAAE3E,SAAS,CAAC4E,gBAAgB,EAAE/D,OAAO,EAAES,aAAa,CAACU,MAAM,CAAC,CAACgC,MAAM,CAAC7D,QAAQ,CAACqC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxH,OAAO,CAAC,CAAC,EAAE1C,SAAS,CAACN,OAAO,EAAE,CAAC,CAAC,EAAEW,QAAQ,EAAE;UAC1CqC,YAAY,EAAEmC;QAChB,CAAC,CAAC;MACJ;MACA,OAAO;QACLvE,SAAS,EAAE;MACb,CAAC;IACH,CAAC;IACD,OAAOW,UAAU,CAACe,MAAM,EAAEZ,qCAAqC,EAAEgB,UAAU,IAAI,CAAC,CAAC,EAAElC,SAAS,CAAC6E,cAAc,EAAE3C,UAAU,EAAE5B,eAAe,CAAC,CAAC;EAC5I,CAAC;EACD,OAAO,CAAC,CAAC,EAAEP,iBAAiB,CAACP,OAAO,EAAEsC,MAAM,IAAI;IAC9C,MAAM8B,OAAO,GAAGpD,KAAK,CAACe,QAAQ,CAACO,MAAM,CAACb,YAAY,CAAC;IACnD,MAAM6D,gBAAgB,GAAG,CAAC,CAAC,EAAE9E,SAAS,CAAC6E,cAAc,EAAE/C,MAAM,CAACd,UAAU,EAAEV,eAAe,CAAC;IAC1F,MAAMH,QAAQ,GAAG2E,gBAAgB,GAAGrB,mBAAmB,CAAC,CAAC,CAAC,EAAE3D,SAAS,CAACN,OAAO,EAAE,CAAC,CAAC,EAAEsC,MAAM,EAAE;MACzFd,UAAU,EAAE,CAAC,CAAC,EAAEhB,SAAS,CAAC+E,oBAAoB,EAAEjD,MAAM,CAACd,UAAU,EAAEV,eAAe;IACpF,CAAC,CAAC,CAAC,GAAGuB,kBAAkB,CAACC,MAAM,CAAC;IAChC,IAAI3B,QAAQ,IAAI,IAAI,EAAE;MACpBQ,sBAAsB,CAAC,IAAI,CAAC;MAC5B;IACF;IACAC,kBAAkB,CAAC;MACjBgD,OAAO;MACPS,eAAe,EAAElE,QAAQ,CAACqC,YAAY;MACtCC,qBAAqB,EAAEtC,QAAQ,CAACsC;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9C,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}